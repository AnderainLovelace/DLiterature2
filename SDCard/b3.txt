第1版序
C语言是一种通用的程序设计语言，其特点包括简洁的表达式、流行的控制流和数据结构、
丰富的运算符集等。C语言不是一种“很高级”的语言，也不“庞大”，并且不专用于某一个特定
的应用领域。但是，C语言的限制少，通用性强，这使得它比一些公认为功能强大的语言使用
更方便、效率更高。
C语言最初是由Dennis Ritchie为UNIX 操作系统设计的，并在DEC PDP-11 计算机上实
现。UNIX 操作系统、C编译器和几乎所有的UNIX应用程序（包括编写本书时用到的所有软
件）都是用C话言编写的。同时，还有一些适用于其它机器的编译器产品，比如IBM System/370、
Honeywell 6000和Interdata 8/32 等。但是，C语言不受限于任何特定的机器或系统，使用它可
以很容易地编写出不经修改就可以运行在所有支持C语言的机器上的程序。
本书的目的是帮助读者学习如何用C 语言编写程序。本书的开头有一个指南性的引言，
目的是使新用户能尽快地开始学习；随后蕾不同的章节中介绍了C 语言的各种主要特性；本
书的附录中还包括一份参考手册。本书并不仅仅只是讲述语言的一些规别，而是采用阅读别
人的代码、自己编写代码、修改某些代码等不同的方式来指导读者进行学习。书中的大部分
例子都可以直接完整地运行，而不只是孤立的程序段。所有例子的文本都以可被机器读取的
文本形式直接通过了测试。除了演示如何有效地使用语言外，我们还尽可能地在适当的时候
向读者介绍一些高效的算法、良好的程序设计风格以及正确的设计原则。
本书并不是一本有关程序设计的入门性手册，它要求读者熟悉基本的程序设计概念，如
变量、赋值语句、循环和函数等尽管如此，初级的程序员仍能够阅读本书，并借此学会C 语
言。当然，知识越丰富，学习起来就越容易。
根据我们的经验，C语言是一种令人愉快的、具有根强表达能力的通用的语言，适合于编
写各种程序。它容易学习，并且随着使用经验的增加，使用者会越来越感到得心应手。我们
希望本书能帮助读者用好C语言。
来自许多朋友和同事的中肯批评和建议对本书的帮助很大，也使我们在写作本书过程中
受益匪浅。在此特剐别感谢Mike Bianchi、Jim Blue、Sut Feldman、Doug McIlroy、Bill Room、
Bob Rosin和Larry Rosler 等人，他们细心地阅读了本书的多次修改版本。我们在这里还要感
谢Al Aho、Steve Bourne、Dan Dvorak、Chuck Haley、Debbie Haley、Marion Harris、Rick Holt、
Steve Johnson、John Mashey、Bob Mitze、Ralph Muha、Peter Nelson、Elliot Pinson、Bill Plauger、
Jerry Spivack、Ken Thompson和Peter Weinberger 等人，他们在不同阶段提出了非常有益的意
见，此外还要感谢Mike Lesk和Joe Ossanna，他们在排版方面给予了我们很宝贵的帮助。
Brian W. Kernighan
Dennis M. Ritchie
引言
C语言是一种通用的程序设计语言。它同UNIX 系统之间具有非常密切的联系――C语言
是在UNIX 系统上开发的，并且，无论是UNIX 系统本身还是其上运行的大部分程序，都是
用C 语言编写的。但是，C 语言并不受限于任何一种操作系统或机器。由于它很适合用来编
写编译器和操作系统，因此被称为“系统编程语言”，但它同样适合于编写不同领城中的大多数
程序。
C语言的很多重要概念来源于由Martin Richards 开发的BCPL语言。BCPL对C语言的影
响间接地来自于B语言，它是Ken Thompson为第一个UNIX 系统而于1970年在DEC PDP-7
计算机上开发的。
BCPL和B语言都是“无类型”的语言。相比较而言，C语言提供了很多数据类型。其基本
类型包括字符、具有多种长度的整型和浮点数等。另外，还有通过指针、数组、结构和联合
派生的各种数据类型。表达式由运算符和操作数组成任何一个表达式，包括赋值表达式或函
数调用表达式，都可以是一个语句。指针提供了与具体机器无关的地址算术运算。
C语言为实现结构良好的程序提供了基本的控制流结构：语句组、条件判断（if-else）、多
路选择（switch）、终止测试在顶部的循环（while、for）、终止测试在底部的循环（do）、提前
跳出循环（break）等。
函数可以返回基本类型、结构、联合或指针类型的值。任何函数都可以递归调用。局部
变量通常是“自动的”，即在每次函数调用时重新创建。函数定义可以不是嵌套的，但可以用块
结构的方式声明变量。一个C语言程序的不同函数可以出现在多个单独编译的不同源文件中。
变量可以只在函数内部有效，也可以在函数外部但仅在一个源文件中有效，还可以在整个程
序中都有效。
编译的预处理阶段将对程序文本进行宏替换、包含其它源文件以及进行条件编译。
C语言是一种相对“低级”的语言。这种说法并没有什么贬义，它仅仅意味着C语言可以处
理大部分计算机能够处理的对象，比如字符、数字和地址。这些对象可以通过具体机器实现
的算术运算符和逻辑运算符组合在一起并移动。
C语言不提供直接处理诸如字符串、集台、列表或数组等复合对象的操作。虽然可以将整
个结构作为一个单元进行拷贝，但C 语言没有处理整个数组或字符串的操。除了由函数的局
部变量提供的静态定义和堆栈外，C语言没有定义任何存储器分配工具，也不提供堆和无用内
存回收工具。最后，C语言本身没有提供输入／输出功能，没有READ 或WRITE 语句，也没
有内置的文件访问方法，所有这些高层的机制必须由显式调用的函数提供。C语言的大部分实
现已合理地包含了这些函数的标准集合。
类似地，C语言只提供简单的单线程控制流，即测试、循环、分组和子程序，它不提供多
道程序设计、并行操作、同步和协同例程。
尽管缺少其中的某些特性看起来好像是一个严重不（“这意味着必须通过调用函数来比较
两个字符串吗？”），但是把语言保持在一个适度的规模会有很多益处。由于C语言相对较小，
因此可以用比较小的篇幅将它描述出来，这样也很容易学会。程序员有理由期望了解、理解
并真正彻底地使用完整的语言。
很多年来，C语言的定义就是《The C Programming Language》第1 版中的参考手册。1983
年，美国国家标准协会（ANSI）成立了一个委员会以制定一个现代的、全面的C语言定义。
最后的结果就是1988年完成的ANSI标准，即“ANSI C”。该标准的大部分特性已被当前的编
译器所支持。
这个标准是基于以前的参考手册制定的，语言本身只做了相对较少的改动。这个标准的
目的之一就是确保现有的程序仍然有效，或者当程序无效时，编译器会对新的定义发出警告
信息。
对大部分程序员来说，最重要的变化是函数声明和函数定义的新语法。现在，函数声明
中可以包含描述函数实际参数的信息；相应地，定义的语法也做了改变。这些附加的信息使
编译器很容易检测到因参数不匹配而导致的错误。根据我们的经验，这个扩充对语言非常有
用。
新标准还对语言做了一些细微的改进：将广泛使用的结构赋值和杖举定义为语言的正式
组成部分；可以进行单精度的浮点运算；明确定义了算术运算的属性，特别是无符号类型的
运算；对预处理器进行了更详尽的说明。这些改进对大多数程序员的影响比较小。
该标准的第二个重要贡献是为C语言定义了一个函数库。它描述了诸如访问操作系统（如
读写主件）、格式化输入／输出、内存分配和字符串操作等类似的很多函数。该标准还定义了
一系列的标准头主件，它们为访问函数声明和数据类型声明提供了统一的方法。这就确保了
使用这个函数库与宿主系统进行交互时程序之间具有兼容的行为。该函数库很大程度上与
UNIX 系统的“标准I/O 库”相似。这个函数库已在本书的第1 版中进行了描述，很多系统中都
使用了它，这一点对大部分程序员来说，不会感觉到有很大的变化。
由于大多数计算机本身就直接支持C 语言提供的数据类型和控制结构，因此只需要一个
很小的运行时库就可以实现自包含程序。由于程序只能够显式地调用标准库中的函数，因此
在不需要的情况下就可以避免对这些函数的调用。除了其中隐藏的一些操作系统细节外，大
部分库函数可以用C语言编写，并可以移植。
尽管C 语言能够运行在大部分的计算机上，但它同具体的机器结构无关。只要稍加用心
就可以编写出可移植的程序，即可以不加修改地远行于多种硬件上。ANSI标准明确地提出了
可移植性问题，并预设了一个常量的集合，借以描述运行程序的机器的特性。
C语言不是一种强类型的语言，但随着它的发展，其类型检查机制已经得到了加强。尽管
C语言的最初定义不赞成在指针和整型变量之间交换值，但并没有禁止，不过现在已经不允许
这种做法了。ANSI标准要求对变量进行正确的声明和显式的强制类型转换，这在某些较完善
的编译器中已经得到了实现。新的函数声明方式是另一个得到改进的地方：编译器将对大部
分的数据类型错误发出警告，并且不自动执行不兼容数据类型之间的类型转换。不过，C语言
保持了其初始的设计思想，即程序员了解他们在做什么，惟一的要求是程序员要明确地表达
他们的意图。
同任何其它语言一样，C语言也有不完美的地方。某些运算符的优先级是不正确的；语法
的某些部分可以进一步优化。尽管如此，对于大量的程序设计应用来说，C语言是一种公认的
非常高效的、表示能力很强的语言。
本书是按照下列结构编排的：第1 章将对C 语言的核心部分进行简要介绍。其目的是让
读者能尽快开始编写C 语言程序，因为我们深信，实际编写程序才是学习一种新语言的好方
法。这部分内客的介绍假定读者对程序设计的基本元素有一定的了解。我们在这部分内容中
没有解释计算机、编译等概念，也没有解释诸如n = n + 2这样的表达式。我们将尽量在合适
的地方介绍一些实用的程序设计技术，但是，本书的中心目的并不是介绍教据结构和算法。
在篇幅有限的情况下，我们将专注于讲解语言本身。
第2 章到第6 章将更详细地讨论C语言的各种特性，所采用的方式将比第l章更加形式化
一些。其中的重点将放在一些完整的程序例子上，而并不仅仅只是一些孤立的程序段。第2
章介绍基本的数据类型、运算符和表达式。第3 章介绍控制流，如if-else、switch、while和for
等。第4 章介绍函数和程序结构――外部变量、作用域规则和多源文件等，同时还会讲述一
些预处理器的知识。第5 章介绍指针和地址运算。第6 章介绍结构和联合。
第7章介绍标准库。标准库提供了一个与操作系统交互的公用接口。这个函数库是由ANSI
标准定义的，这就意味着所有支持C 语言的机器都会支持它，因此，使用这个库执行输入／
输出或其它访问操作系统的操作的程序可以不加修改地运行在不同机器上。
第8 章介绍C 语言程序和UNIX 操作系统之间的接口，我们将把重点放在输入／输出、
文件系统和存储分配上。尽管本章中的某些内容是针对UNIX 系统所写的，但是使用其它系
统的程序员仍然会从中获益，比如深入了解如何实现标准库以及有关可移植性方面的一些建
议。
附录A 是一个语言参考手册。虽然C 语言的语法和语义的官方正式定义是ANSI 标准本
身，但是，ANSI标准的文档首先是写给编译器的编写者看的，因此，对程序员来说不一定最
合适。本书中的参考手册采用了一种不很严格的形式，更简洁地对C语言的定义进行了介绍。
附录B 是对标准库的一个总结，它同样是为程序员而非编译器实现者准备的。附录C 对标准
C 语言相对最初的C 语言版本所做的变更做了一个简短的小结。但是，如果有不一致或疑问
的地方，标准本身和各个特定的编译器则是解释语言的最终权威。本书的最后提供了本书的
索引。
第1章 导言
在本书的开篇，我们首先概要地介绍C 语言，主要是通过实际的程序引入C 语言的基本
元素，至于其中的具体细节、规则以及一些例外情况，在此暂时不多做讨论。因此，本章不
准备完整、详细地讨论C语言中的一些技术（当然，这里所举的所有例子都是正确的）。我们
是希望读者能尽快地编写出有用的程序，为此，本章将重点介绍一些基本概念，比如变量与
常量、算术运算、控制流、函数、基本输入／输出等。而对于编写较大型程序所涉及到的一
些重要特性，比如指针、结构、C语言中十分丰富的运算符集合、部分控制流语句以及标准库
等，本章将暂不做讨论。
这种讲解方式也有缺点。应当提请注意的是，在本章的内容中无法找到任何特定语言特
性的完整说明，并且，由于比较简略，可能会使读者产生一些误解；再者，由于所举的例子
并没有用到C 语言的所有强大功能，因此，这些例子也许并不简洁、精炼。虽然我们已经尽
力将这些问题的影响降到最低，但问题肯定还是存在。另一个不足之处在于，本章所讲的某
些内容在后续相关章节还必须再次讲述。我们希望这种重复给读者带来的帮助效果远远超过
它的负面影响。
无论是利还是弊，一个经验丰富的程序员应该可以从本章介绍的内容中推知他们自己进
行程序设计所需要的一些基本元素。初学者应编写一些类似的小程序作为本章内容的补充练
习。无论是经验丰富的程序员还是初学者，都可以把本章作为后续各章详细讲解的内容的框
架。
1.1. 入门
学习一门新程序设计语言的惟一途径就是使用它编写程序。对于所有语言的初学者来说，
编写的第一个程序几乎都是相同的，即：
请打印出下列内容
hello, world
尽管这个练习很简单，但对于初学语言的人来说，它仍然可能成为一大障碍，因为要实
现这个目的，我们首先必须编写程序文本，然后成功地运行编译，并加载、运行，最后输出
到某个地方。掌握了这些操作细节以后，其它事情就比较容易了。
在C语言中，我们可以用下列程序打印出“hello, world”：
#include <stdio.h>
main()
{
printf("hello, world\n");
}
如何运行这个程序取决于所使用的系统。这里举一个特殊的例子。在UNIX 操作系统中，
首先必须在某个文件中建立这个源程序，并以“.c”作为文件的扩展名，例如hello.c，然
后再通过下列命令进行编译：
cc hello.c
如果源程序没有什么错误（例如漏掉字符或拼错字符），编译过程将顺利进行，并生成一个可
执行文件a.out。然后，我们输入：
a.out
即可运行a.out，打印出下列信息：
hello, world
在其它操作系统中，编译、加载、运行等规则会有所不同。
#include <stdio.h>
main()
{
printf("hello, world\n");
}
包含标准库的信息
定义名为main的函数，它不接受参数值
main函数的语句都被括在花括号中
main函数调用库函数printf以显示字符序列；
\n代表换行符
第一个C语言程序
下面对程序本身做些说明。一个C 语言程序，无论其大小如何，都是由函数和变量组成
的。函数中包含一些语句，以指定所要执行的计算操作；变量则用于存储计算过程中使用的
值。C 语言中的函数类似于Fortran 语言中的子程序和函数，与Pascal语言中的过程和函数也
很类似。在本例中，函数的名字为main。通常情况下，函数的命名没有限制，但main是一
个特殊的函数名――每个程序都从main函数的起点开始执行，这意味着每个程序都必须在某
个位置包含一个main函数。
main函数通常会调用其它函数来帮助完成某些工作，被调用的函数可以是程序设计人员
自己编写的，也可以来自于函数库。上述程序段中的第一行语句
#include <stdio.h>
用于告诉编译器在本程序中包含标准输入／输出库的信息。许多C 语言源程序的开始处都包
含这一行语句。我们将在第7章和附录B中对标准库进行详细介绍。
函数之间进行数据交换的一种方法是调用函数向被调用函数提供一个值（称为参数）列
表。函数名后面的一对圆括号将参数列表括起来。在本例中，main函数不需要任何参数，因
此用空参数表()表示。
函数中的语句用一对花括号{}括起来。本例中的main函数仅包含下面一条语句：
printf("hello, world\n");
调用函数时，只需要使用函数名加上用圆括号括起来的参数表即可。上面这条语句将"hello,
world\n"。作为参数调用printf函数。printf 是一个用于打印输出的库函数，在此处，
它打印双引号中间的字符串。
用双引号括起来的字符序列称为字符串或字符串常量，如"hello, world\n"就是一个
字符串。目前我们仅使用字符串作为printf及其它函数的参数。
在C语言中，字符序列\n表示换行符，在打印中遇到它时，输出打印将换行，从下一行
的左端行首开始。如果去掉字符串中的\n（这是个值得一做的练习），即使输出打印完成后也
不会换行。在printf函数的参数中，只能用\n表示换行符。如果用程序的换行代替\n，例
如：
printf("hello, world
");
C编译器将会产生一条错误信息。
printf函数永远不会自动换行，这样我们可以多次调用该函数以分阶段得到一个长的输
出行。上面给出的第一个程序也可以改写成下列形式：
#include <stdio.h>
main()
{
printf("hello, ");
printf("world");
printf("\n");
}
这段程序与前面的程序的输出相同。
请注意，\n只代表一个字符。类似于\n的转义字符序列为表示无法输入的字符或不可见
字符提供了一种通用的可扩充的机制。除此之外，C 语言提供的转义字符序列还包括：\t 表
示制表符；\b 表示回退符；\"表示双引号；\\表示反斜杠符本身。2.3 节将给出转义字符序
列的完整列表。